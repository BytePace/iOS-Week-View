// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;
@class UIWindow;

/// Class of the main week view. This view can be placed anywhere and will adapt to given size. All behaviours are internal,
/// and all customization can be done with public functions. No delegates have been implemented yet. WeekView can be used in both landscape and portrait
/// mode.
SWIFT_CLASS("_TtC11QVRWeekView8WeekView")
@interface WeekView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
/// Updates the time displayed on the calendar
- (void)updateTimeDisplayed;
/// Shows the day view cell corresponding to today.
- (void)showToday;
@end

@class UIColor;
@class UIFont;
@class NSNumber;

@interface WeekView (SWIFT_EXTENSION(QVRWeekView))
/// Sets background color of main scrollview.
/// \param color New background color.
///
- (void)setBackgroundColorTo:(UIColor * _Nonnull)color;
/// Sets height of top bar.
/// \param height New height for top bar.
///
- (void)setTopBarHeightTo:(CGFloat)height;
/// Sets background color of top bar containing day labels.
/// \param color New color for top bar.
///
- (void)setTopBarColorTo:(UIColor * _Nonnull)color;
/// Sets background color of the side bar containing hour labels.
/// \param color New color for side bar.
///
- (void)setSideBarColorTo:(UIColor * _Nonnull)color;
/// Sets the width of the side bar containing hour labels.
/// \param width New width for the side bar.
///
- (void)setSideBarWidthTo:(CGFloat)width;
/// Sets font used by all day labels contained in the top bar.
/// \param font New font for all day labels.
///
- (void)setDayLabelFontTo:(UIFont * _Nonnull)font;
/// Sets the text color for all day labels contained in the top bar.
/// \param color New color of text.
///
- (void)setDayLabelTextColorTo:(UIColor * _Nonnull)color;
/// Sets the minimum percentage that day label text will be resized to if label is too small.
/// (CURRENTLY NOT IMPLEMENTED)
/// \param scale New scale for the day label.
///
- (void)setDayLabelMinimumScaleTo:(CGFloat)scale;
/// Sets font used by all hour labels contained in the side bar.
/// \param font New font for all hour labels.
///
- (void)setHourLabelFontTo:(UIFont * _Nonnull)font;
/// Sets the text color for all hour labels contained in the side bar.
/// \param color New color of text.
///
- (void)setHourLabelTextColorTo:(UIColor * _Nonnull)color;
/// Sets the minimum percentage that hour label text will be resized to if label is too small.
/// \param scale New scale for the hour labels.
///
- (void)setHourLabelMinimumScaleTo:(CGFloat)scale;
/// Sets number of visible days when in portait mode.
/// \param days New number of days visible.
///
- (void)setVisibleDaysPortraitWithNumberOfDays:(NSInteger)days;
/// Sets number of visible days when in landscape mode.
/// \param days New number of days visible.
///
- (void)setVisibleDaysLandscapeWithNumberOfDays:(NSInteger)days;
/// Sets font used for all event labels contained in the day view cells.
/// \param font New font for all event labels.
///
- (void)setEventLabelFontTo:(UIFont * _Nonnull)font;
/// Sets the text color for all event labels contained in the day view cells.
/// \param color New color of text.
///
- (void)setEventLabelTextColorTo:(UIColor * _Nonnull)color;
/// Sets the minimum percentage that event label text will be resized to if label is too small.
/// \param scale New scale for the event labels.
///
- (void)setEventLabelMinimumScaleTo:(CGFloat)scale;
/// Sets default color of the day view cells. These are all days that are not weekends.
/// \param color New color for all standard day view cells.
///
- (void)setDefaultDayViewColorTo:(UIColor * _Nonnull)color;
/// Sets color for all day view cells that are weekends.
/// \param color New color for all weekend day view cells.
///
- (void)setWeekendDayViewColorTo:(UIColor * _Nonnull)color;
/// Sets color for the overlay displayed ontop of the day view cells. Overlay will indicate which days have passed and how much time of today has passed. Overlay view itself is opaque, and thus will require a UIColor with alpha less than 1 to become transluscent.
/// \param color New color for the overlay.
///
- (void)setDayViewOverlayColorTo:(UIColor * _Nonnull)color;
/// Sets the color for the hour indicator.
/// \param color New color for hour indicator.
///
- (void)setDayViewHourIndicatorColorTo:(UIColor * _Nonnull)color;
/// Sets thickness (aka height) of the hour indicator.
/// \param thickness New thickness for hour indicator.
///
- (void)setDayViewHourIndicatorThicknessTo:(CGFloat)thickness;
/// Sets the color of the main seperators in the day view cells. Main seperators are full lines and not dashed.
/// \param color New color for main seperators.
///
- (void)setDayViewMainSeperatorColorTo:(UIColor * _Nonnull)color;
/// Sets the thickness of the main seperators in the day view cells. Main seperators are full lines and not dashed.
/// \param thickness New thickness for main seperators.
///
- (void)setDayViewMainSeperatorThicknessTo:(CGFloat)thickness;
/// Sets the color of the dashed/dotted seperators in the day view cells.
/// \param color New color for dashed/dotted seperators.
///
- (void)setDayViewDashedSeperatorColorTo:(UIColor * _Nonnull)color;
/// Sets the thickness of the dashed/dotted seperators in the day view cells.
/// \param thickness New thickness for dashed/dotted seperators.
///
- (void)setDayViewDashedSeperatorThicknessTo:(CGFloat)thickness;
/// Sets the pattern for the dashed/dotted seperators. Requires an array of NSNumbers.
/// Example 1: [10, 5] will provide a pattern of 10 points drawn, 5 points empty, repeated.
/// Example 2: [3, 4, 9, 2] will provide a pattern of 4 points drawn, 4 points empty, 9 points drawn, 2 points empty.
/// See Apple API for additional information on pattern drawing.
/// \param pattern New pattern for dashed/dotted seperators.
///
- (void)setDayViewDashedSeperatorPatternTo:(NSArray<NSNumber *> * _Nonnull)pattern;
/// Sets the height for the day view cells. This is the initial height for zoom scale = 1.0.
/// \param height New height for day view cells.
///
- (void)setDayViewCellHeightTo:(CGFloat)height;
/// Sets the amount of spacing in between day view cells when in portrait mode.
/// \param width New width of spacing gap.
///
- (void)setPortraitDayViewSideSpacingTo:(CGFloat)width;
/// Sets the amount of spacing in between day view cells when in landscape mode.
/// \param width New width of spacing gap.
///
- (void)setLandscapeDayViewSideSpacingTo:(CGFloat)width;
/// Sets the amount of spacing above and below day view cells when in portrait mode.
/// \param height New height of spacing gap.
///
- (void)setPortraitDayViewVerticalSpacingTo:(CGFloat)width;
/// Sets the amount of spacing above and below day view cells when in landscape mode.
/// \param height New height of spacing gap.
///
- (void)setLandscapeDayViewVerticalSpacingTo:(CGFloat)width;
/// Sets the sensitivity for horizontal scrolling. A higher number will multiply input velocity more and thus result in more cells being skipped when scrolling.
/// \param multiplier New velocity multiplier.
///
- (void)setVelocityOffsetMultiplierTo:(CGFloat)multiplier;
@end

#pragma clang diagnostic pop
